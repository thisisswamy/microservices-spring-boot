package com.swamy.microservice.basics.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.swamy.microservice.basics.JWT.JwtAuthRequest;
import com.swamy.microservice.basics.configuration.CustomUserDetailsService;
import com.swamy.microservice.basics.models.UserRequest;
import com.swamy.microservice.basics.models.UserResponse;
import com.swamy.microservice.basics.models.UserWithReviews;
import com.swamy.microservice.basics.services.UserCommonService;

@RestController
public class UserAccountController {
	
	@Autowired
	private UserCommonService commonService;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private CustomUserDetailsService customUserDetailsService;
	
	@Autowired
	private 
	
	@PostMapping("/register")
	public String registerUser(@RequestBody UserRequest userRequest) {
		return commonService.registerUser(userRequest);
	}
	
	@GetMapping("/all")
	public List<UserResponse> getUsersList(){
		return commonService.getAllUsersList();
	}
	
	@GetMapping("/{userName}")
	public UserWithReviews getUserWithReviews(@PathVariable String userName) {
		System.err.println(userName);
		return commonService.getUserWithReviews(userName);
	}
	
	@PostMapping("/loginToken")
	public ResponseEntity<?> loginToken(@RequestBody JwtAuthRequest auth) throws Exception{
		
		try {
			UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
					
					new UsernamePasswordAuthenticationToken(auth.getEmail(), auth.getPassword(), new ArrayList<>());
			
			authenticationManager.authenticate(usernamePasswordAuthenticationToken);
		} catch (BadCredentialsException e) {
			throw new Exception("invalid username..");
		}
		UserDetails userDetails = customUserDetailsService.loadUserByUsername(auth.getEmail());
		String jwt= jwtUtil.generateToken(userDetails);
	
		return  ResponseEntity.ok(new JwtTokenModel(jwt));
	}
	
	

}
