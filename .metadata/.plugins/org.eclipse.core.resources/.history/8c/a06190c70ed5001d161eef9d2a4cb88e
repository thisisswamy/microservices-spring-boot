package com.swamy.microservice.basics.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.swamy.microservice.basics.JWT.JwtFilter;
import com.swamy.microservice.basics.repos.UserRepo;


@EnableWebSecurity
@Configuration
public class MySecurityConfig {
	
	private static final String[] SECURE_URLS= {"/all", "/{userName}"};
	private static final String[] PUBLIC_URLS= {"/register",};
	
	@Autowired
	private UserRepo userRepo;
	
	@Autowired
	private CustomUserDetailsService customUserDetailsService;
	
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Autowired
	private JwtFilter jwtFilter;
	
	
	@Bean  //Exposing some routes to publicly
    public WebSecurityCustomizer webSecurityCustomizer() {
        return (web) -> web.ignoring().requestMatchers(PUBLIC_URLS);
    }
	
	 @Bean
	 public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
	        http.authorizeHttpRequests((authz) -> authz.anyRequest().authenticated());
	        http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
	        return http.build();
	 }
	 
	 @Bean
	 public AuthenticationProvider manager() {
		 DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
		 authProvider.setUserDetailsService(customUserDetailsService);
		 authProvider.setPasswordEncoder(bCryptPasswordEncoder);
		 return authProvider;
	 }
	 
		@Bean
		public AuthenticationManager authenticationManagerBean() throws Exception {
			return new ProviderMan;
		}
	 
	 
	

}
